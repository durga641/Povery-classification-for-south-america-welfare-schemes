# -*- coding: utf-8 -*-
"""
Created on Wed Sep 26 09:19:20 2018

@author: Venkat Durga Rao
"""


import numpy as np
import pandas as pd
import matplotlib.pyplot as pt
import os
from collections import Counter
import seaborn as sns  
from sklearn import tree
from sklearn import model_selection
from collections import Counter
from sklearn import preprocessing
import math

from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve



os.chdir("E:\costarica_multiclass_poverty")

print  ('DURGA U ROCKS')

## READ THE TEST & TRAIN DATA

train=pd.read_csv("train.csv")
test=pd.read_csv("test.csv")

missing_cols=train.columns[train.isna().any()].tolist()


#############  IMPUTE MISSING VALUES  #########

train=train.replace({'dependency': 'no','edjefa':'no','edjefe':'no','v18q1': np.nan}, 0)
train=train.replace({'dependency': 'yes'}, np.nan)
train=train.replace({'edjefa':'yes','edjefe':'yes'},6)


train=train.drop(columns=['idhogar'])  ### drop id columns
train=train.drop(columns=['rez_esc','SQBescolari',	'SQBage',	'SQBhogar_total',	'SQBedjefe',	'SQBhogar_nin',	'SQBovercrowding',	'SQBdependency',	'SQBmeaned','agesq'])  ## these redundant fields and correlated ..hence dropping as part of cleansing


train.columns[train.isnull().any()].tolist()  ## find the columns wiht missing values

mean_imputer = preprocessing.Imputer() #By defalut parameter is mean and let it use default one.
mean_imputer.fit(train[['v2a1','meaneduc','dependency']]) 
train[['v2a1','meaneduc','dependency']] = mean_imputer.transform(train[['v2a1','meaneduc','dependency']])


x_train=train


x_train.select_dtypes(include=['float64']).columns.tolist()



############### IMPUTE TEST DATA ###############3

test=test.replace({'dependency': 'no','edjefa':'no','edjefe':'no','v18q1': np.nan}, 0)
test=test.replace({'dependency': 'yes'}, np.nan)
test=test.replace({'edjefa':'yes','edjefe':'yes'},6)


test=test.drop(columns=['idhogar'])  ### drop id columns
test=test.drop(columns=['rez_esc','SQBescolari',	'SQBage',	'SQBhogar_total',	'SQBedjefe',	'SQBhogar_nin',	'SQBovercrowding',	'SQBdependency',	'SQBmeaned','agesq'])  ## these redundant fields and correlated ..hence dropping as part of cleansing


test.columns[test.isnull().any()].tolist()  ## find the columns wiht missing values

mean_imputer = preprocessing.Imputer() #By defalut parameter is mean and let it use default one.
mean_imputer.fit(test[['v2a1','meaneduc','dependency']]) 
test[['v2a1','meaneduc','dependency']] = mean_imputer.transform(test[['v2a1','meaneduc','dependency']])
x_test=test

############################# DETECT OUTLIERS ############################


def detect_outliers(df,n,features):
    """
    Takes a dataframe df of features and returns a list of the indices
    corresponding to the observations containing more than n outliers according
    to the Tukey method.
    """
    outlier_indices = []
    
    # iterate over features(columns)
    for col in features:
        # 1st quartile (25%)
        Q1 = np.percentile(df[col], 25)
        # 3rd quartile (75%)
        Q3 = np.percentile(df[col],75)
        # Interquartile range (IQR)
        IQR = Q3 - Q1
        
        # outlier step
        outlier_step = 1.5 * IQR
        
        # Determine a list of indices of outliers for feature col
        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step )].index
        
        # append the found outlier indices for col to the list of outlier indices 
        outlier_indices.extend(outlier_list_col)
        
    # select observations containing more than 2 outliers
    outlier_indices = Counter(outlier_indices)        
    multiple_outliers = list( k for k, v in outlier_indices.items() if v > n )
    
    return multiple_outliers   

# detect outliers from all fields
    #x_train._get_numeric_data().to_csv("numeric_data.csv")
#x_train.info()



####################### DROP OUTLIERS and feature engineering  for train data #####################
    
probable_outliers=x_train.select_dtypes(include=['float64']).columns.tolist()

Outliers_to_drop = detect_outliers(x_train,2,probable_outliers)
x_train = x_train.drop(Outliers_to_drop, axis = 0).reset_index(drop=True)

x_train.columns[x_train.isna().any()].tolist()
x_train.to_csv("temp1.csv")
x_train['age12above']=x_train['r4h2']+x_train['r4m2']-x_train['hogar_mayor']

x_train['bedrooms_to_rooms'] = x_train['bedrooms']/x_train['rooms']
x_train['rent_to_rooms'] = x_train['v2a1']/x_train['rooms']
x_train['tamhog_to_rooms'] = x_train['tamhog']/x_train['rooms']

x_train['age12above_percent']=((x_train['r4h2']+x_train['r4m2'])/(x_train['r4t3']))*100

x_train['perhead_room_size']=((x_train['rooms'])/(x_train['hhsize']))*100


#x_train['dependents_ratio']=((x_train['hogar_nin']+x_train['hogar_mayor'])/x_train['hogar_total'])*10
#x_train['dependents_ratio']=x_train['dependents_ratio'].apply(np.floor)
#x_train['dependents_ratio']=np.round(x_train['dependents_ratio'])

#x_train['fancy1']=np.round(-1*x_train['overcrowding']+x_train['meaneduc']+(-1*x_train['hogar_nin'])+x_train['dependents_ratio'])
#x_train['fancy1'].value_counts()

x_train['edjefe']=x_train.edjefe.astype(float)
x_train['edjefa']=x_train.edjefa.astype(float)

x_train['edjefefa_upd']=x_train['edjefe'] +x_train['edjefa'] + x_train['edjefa']+(x_train['edjefe']*x_train['edjefa'])

y_train=x_train['Target']
#x_train=x_train.drop(columns=['hogar_nin','hogar_adul','hogar_mayor','hogar_total'])
x_train=x_train.drop(columns=['Target','Id'])



###################### DROP OUTLIER AND FEATURE ENGINEERING FOR TEST DATA ####################

probable_outliers=x_test.select_dtypes(include=['float64']).columns.tolist()

Outliers_to_drop = detect_outliers(x_test,2,probable_outliers)
x_test = x_test.drop(Outliers_to_drop, axis = 0).reset_index(drop=True)

x_test.columns[x_test.isna().any()].tolist()
x_test.to_csv("temp1.csv")
x_test['age12above']=x_test['r4h2']+x_test['r4m2']-x_test['hogar_mayor']

x_test['bedrooms_to_rooms'] = x_test['bedrooms']/x_test['rooms']
x_test['rent_to_rooms'] = x_test['v2a1']/x_test['rooms']
x_test['tamhog_to_rooms'] = x_test['tamhog']/x_test['rooms']

x_test['age12above_percent']=((x_test['r4h2']+x_test['r4m2'])/(x_test['r4t3']))*100

x_test['perhead_room_size']=((x_test['rooms'])/(x_test['hhsize']))*100


#x_test['dependents_ratio']=((x_train['hogar_nin']+x_test['hogar_mayor'])/x_test['hogar_total'])*10
#x_test['dependents_ratio']=x_test['dependents_ratio'].apply(np.floor)
#x_test['dependents_ratio']=np.round(x_test['dependents_ratio'])

#x_test['fancy1']=np.round(-1*x_test['overcrowding']+x_test['meaneduc']+(-1*x_test['hogar_nin'])+x_test['dependents_ratio'])
#x_test['fancy1'].value_counts()

x_test['edjefe']=x_test.edjefe.astype(float)
x_test['edjefa']=x_test.edjefa.astype(float)

x_test['edjefefa_upd']=x_test['edjefe'] +x_test['edjefa'] + x_test['edjefa']+(x_test['edjefe']*x_test['edjefa'])


#x_train=x_train.drop(columns=['hogar_nin','hogar_adul','hogar_mayor','hogar_total'])

output=x_test['Id']

x_test=x_test.drop(columns=['Id']) 


############################## RANDOM FOREST #################
kfold=model_selection.StratifiedKFold(n_splits=10,random_state=105600)
rdt=RandomForestClassifier()
dt_grid = {'max_depth':list(range(5,15)), 'min_samples_split':list(range(8,20)), 'criterion':['gini','entropy']}
grid_tree_estimator = model_selection.GridSearchCV(rdt,dt_grid,cv=kfold,scoring='f1_macro')
grid_tree_estimator.fit(x_train, y_train)
print(grid_tree_estimator.grid_scores_)
print(grid_tree_estimator.best_score_)    ### so far best 64.59  ### next 82.2  ### 81.9 ## 82.4
print(grid_tree_estimator.best_params_)
print(grid_tree_estimator.)
grid_tree_estimator.cv
x_test.to_csv("cleaned_test_data.csv")
output['Target']=grid_tree_estimator.predict(x_test)
